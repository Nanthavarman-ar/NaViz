import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import styles from './TopBar.module.css';
import { Button } from './ui/button';
import { Play, Pause, Settings, Activity, Zap, Eye, EyeOff, Camera, Layers, Navigation, Sun, Palette, Download, Share, RotateCcw, Move, Scale, Ruler, Brain, BarChart3 } from 'lucide-react';
const TopBar = ({ isGenerating = false, generationProgress = 0, onToggleRealTime, realTimeEnabled = false, fps = 60, activeFeatures = 0, cameraMode = 'orbit', onCameraModeChange, onToggleGrid, gridVisible = false, onToggleWireframe, wireframeEnabled = false, onToggleStats, statsVisible = false }) => {
    const [progress, setProgress] = useState(generationProgress);
    const [currentTime, setCurrentTime] = useState(new Date());
    useEffect(() => {
        setProgress(generationProgress);
    }, [generationProgress]);
    useEffect(() => {
        const timer = setInterval(() => {
            setCurrentTime(new Date());
        }, 1000);
        return () => clearInterval(timer);
    }, []);
    const getFpsColor = (fps) => {
        if (fps >= 50)
            return 'text-green-400';
        if (fps >= 30)
            return 'text-yellow-400';
        return 'text-red-400';
    };
    return (_jsxs("div", { className: "p-3 border-b border-gray-700 bg-gray-800 text-white flex items-center justify-between shadow-lg", children: [_jsxs("div", { className: "flex items-center gap-3", children: [_jsx(Button, { variant: realTimeEnabled ? "default" : "outline", size: "sm", onClick: onToggleRealTime, className: "flex items-center gap-2", "aria-label": realTimeEnabled ? "Disable Real-Time Updates" : "Enable Real-Time Updates", children: [realTimeEnabled ? _jsx(Play, { className: "w-4 h-4" }) : _jsx(Pause, { className: "w-4 h-4" }), realTimeEnabled ? 'Real-Time ON' : 'Real-Time OFF'] }), _jsxs("div", { className: "flex items-center gap-1 bg-gray-700 rounded-lg p-1", children: [_jsxs("button", { onClick: () => onCameraModeChange?.('orbit'), className: `px-3 py-1 rounded text-sm transition-all ${cameraMode === 'orbit' ? 'bg-blue-600 text-white' : 'text-gray-300 hover:bg-gray-600'}`, title: "Orbit Camera", children: [_jsx(Camera, { className: "w-4 h-4 inline mr-1" }), "Orbit"] }), _jsxs("button", { onClick: () => onCameraModeChange?.('fly'), className: `px-3 py-1 rounded text-sm transition-all ${cameraMode === 'fly' ? 'bg-blue-600 text-white' : 'text-gray-300 hover:bg-gray-600'}`, title: "Fly Camera", children: [_jsx(Eye, { className: "w-4 h-4 inline mr-1" }), "Fly"] }), _jsxs("button", { onClick: () => onCameraModeChange?.('walk'), className: `px-3 py-1 rounded text-sm transition-all ${cameraMode === 'walk' ? 'bg-blue-600 text-white' : 'text-gray-300 hover:bg-gray-600'}`, title: "Walk Camera", children: [_jsx(EyeOff, { className: "w-4 h-4 inline mr-1" }), "Walk"] })] }), _jsxs("div", { className: "flex items-center gap-1", children: [_jsx("button", { onClick: onToggleGrid, className: `p-2 rounded transition-all ${gridVisible ? 'bg-purple-600 text-white' : 'bg-gray-700 hover:bg-gray-600'}`, title: "Toggle Grid", children: _jsx(Layers, { className: "w-4 h-4" }) }), _jsx("button", { onClick: onToggleWireframe, className: `p-2 rounded transition-all ${wireframeEnabled ? 'bg-orange-600 text-white' : 'bg-gray-700 hover:bg-gray-600'}`, title: "Toggle Wireframe", children: _jsx(Settings, { className: "w-4 h-4" }) }), _jsx("button", { onClick: onToggleStats, className: `p-2 rounded transition-all ${statsVisible ? 'bg-cyan-600 text-white' : 'bg-gray-700 hover:bg-gray-600'}`, title: "Toggle Performance Stats", children: _jsx(Activity, { className: "w-4 h-4" }) })] }), _jsxs("div", { className: "flex items-center gap-2 ml-4", children: [_jsxs("div", { className: "flex items-center gap-1 bg-gray-700 rounded-lg p-1", children: [_jsx("button", { className: "p-2 rounded hover:bg-gray-600", title: "Navigation Tools", children: _jsx(Navigation, { className: "w-4 h-4" }) }), _jsx("button", { className: "p-2 rounded hover:bg-gray-600", title: "Move", children: _jsx(Move, { className: "w-4 h-4" }) }), _jsx("button", { className: "p-2 rounded hover:bg-gray-600", title: "Rotate", children: _jsx(RotateCcw, { className: "w-4 h-4" }) }), _jsx("button", { className: "p-2 rounded hover:bg-gray-600", title: "Scale", children: _jsx(Scale, { className: "w-4 h-4" }) })] }), _jsxs("div", { className: "flex items-center gap-1 bg-gray-700 rounded-lg p-1", children: [_jsx("button", { className: "p-2 rounded hover:bg-gray-600", title: "Visual Settings", children: _jsx(Palette, { className: "w-4 h-4" }) }), _jsx("button", { className: "p-2 rounded hover:bg-gray-600", title: "Lighting", children: _jsx(Sun, { className: "w-4 h-4" }) }), _jsx("button", { className: "p-2 rounded hover:bg-gray-600", title: "Materials", children: _jsx(Palette, { className: "w-4 h-4" }) })] }), _jsxs("div", { className: "flex items-center gap-1 bg-gray-700 rounded-lg p-1", children: [_jsx("button", { className: "p-2 rounded hover:bg-gray-600", title: "Analysis Tools", children: _jsx(BarChart3, { className: "w-4 h-4" }) }), _jsx("button", { className: "p-2 rounded hover:bg-gray-600", title: "Measure", children: _jsx(Ruler, { className: "w-4 h-4" }) }), _jsx("button", { className: "p-2 rounded hover:bg-gray-600", title: "AI Advisor", children: _jsx(Brain, { className: "w-4 h-4" }) })] }), _jsxs("div", { className: "flex items-center gap-1 bg-gray-700 rounded-lg p-1", children: [_jsx("button", { className: "p-2 rounded hover:bg-gray-600", title: "Export", children: _jsx(Download, { className: "w-4 h-4" }) }), _jsx("button", { className: "p-2 rounded hover:bg-gray-600", title: "Share", children: _jsx(Share, { className: "w-4 h-4" }) })] })] })] }), _jsxs("div", { className: "flex items-center gap-6", children: [isGenerating && (_jsxs("div", { className: "flex items-center gap-3 bg-gray-700 px-4 py-2 rounded-lg", children: [_jsx("div", { className: "text-sm font-medium", children: "Generating Terrain" }), _jsxs("div", { className: "text-sm text-blue-400", children: [progress.toFixed(0), "%"] }), _jsx("div", { className: styles.progressBarContainer, style: { '--progress-width': `${progress}%` }, children: _jsx("div", { className: styles.progressBarFill }) })] })), _jsxs("div", { className: "flex items-center gap-4 text-sm", children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Activity, { className: "w-4 h-4 text-gray-400" }), _jsxs("span", { className: getFpsColor(fps), children: ["FPS: ", fps] })] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Zap, { className: "w-4 h-4 text-gray-400" }), _jsxs("span", { children: ["Features: ", activeFeatures] })] }), _jsx("div", { className: "text-gray-400", children: currentTime.toLocaleTimeString() })] })] }), _jsx("div", { className: "flex items-center gap-2", children: _jsx("div", { className: "text-xs text-gray-400 bg-gray-700 px-2 py-1 rounded", children: "v2.1.0" }) })] }));
};
export default TopBar;
