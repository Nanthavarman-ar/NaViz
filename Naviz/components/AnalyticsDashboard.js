import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Progress } from './ui/progress';
import { BarChart3, AlertTriangle, CheckCircle, DollarSign, ShoppingCart, Trash2, Target, Clock, Download, RefreshCw } from 'lucide-react';
const AnalyticsDashboard = ({ isActive, onClose, data, onRefresh, onExport }) => {
    const [timeRange, setTimeRange] = useState('30d');
    const [selectedCategory, setSelectedCategory] = useState('all');
    const [isLoading, setIsLoading] = useState(false);
    // Mock data for demonstration - in real app, this would come from props or API
    const mockData = {
        totalItems: 156,
        expiringSoon: 12,
        expired: 5,
        consumed: 89,
        wasted: 8,
        totalValue: 1247.50,
        wasteValue: 67.30,
        consumptionRate: 2.8,
        wasteRate: 8.2,
        categoryBreakdown: [
            { category: 'Dairy', count: 23, value: 156.80, wasteCount: 2 },
            { category: 'Vegetables', count: 34, value: 89.60, wasteCount: 1 },
            { category: 'Fruits', count: 28, value: 134.20, wasteCount: 3 },
            { category: 'Meat', count: 15, value: 234.50, wasteCount: 1 },
            { category: 'Grains', count: 31, value: 98.40, wasteCount: 0 },
            { category: 'Other', count: 25, value: 534.00, wasteCount: 1 }
        ],
        monthlyTrends: [
            { month: 'Jan', added: 45, consumed: 38, wasted: 3, value: 320.50 },
            { month: 'Feb', added: 52, consumed: 41, wasted: 4, value: 378.20 },
            { month: 'Mar', added: 48, consumed: 44, wasted: 2, value: 412.30 },
            { month: 'Apr', added: 56, consumed: 49, wasted: 5, value: 445.80 }
        ],
        expiryPredictions: [
            { itemName: 'Milk (2L)', predictedDays: 3, confidence: 0.85, category: 'Dairy' },
            { itemName: 'Chicken Breast', predictedDays: 2, confidence: 0.92, category: 'Meat' },
            { itemName: 'Spinach', predictedDays: 1, confidence: 0.78, category: 'Vegetables' },
            { itemName: 'Apples', predictedDays: 5, confidence: 0.71, category: 'Fruits' }
        ],
        shoppingRecommendations: [
            { item: 'Bananas', reason: 'Frequently consumed, running low', frequency: 3, avgConsumption: 6 },
            { item: 'Bread', reason: 'High consumption rate', frequency: 4, avgConsumption: 8 },
            { item: 'Eggs', reason: 'Consistent weekly purchase', frequency: 2, avgConsumption: 12 },
            { item: 'Yogurt', reason: 'Popular healthy option', frequency: 2, avgConsumption: 4 }
        ]
    };
    const currentData = data || mockData;
    const handleRefresh = async () => {
        setIsLoading(true);
        if (onRefresh) {
            await onRefresh();
        }
        setTimeout(() => setIsLoading(false), 1000);
    };
    const handleExport = (format) => {
        if (onExport) {
            onExport(format);
        }
    };
    const filteredCategories = selectedCategory === 'all'
        ? currentData.categoryBreakdown
        : currentData.categoryBreakdown.filter(cat => cat.category === selectedCategory);
    const wastePercentage = (currentData.wasted / (currentData.consumed + currentData.wasted)) * 100;
    const efficiencyScore = Math.max(0, 100 - wastePercentage - (currentData.expired / currentData.totalItems) * 100);
    if (!isActive)
        return null;
    return (_jsx("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4", children: _jsxs(Card, { className: "w-full max-w-7xl max-h-[95vh] bg-white dark:bg-slate-900 border-slate-200 dark:border-slate-700 overflow-hidden", children: [_jsx(CardHeader, { className: "pb-4", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs(CardTitle, { className: "flex items-center gap-2 text-xl", children: [_jsx(BarChart3, { className: "w-6 h-6 text-blue-500" }), "Food Analytics Dashboard"] }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsxs(Select, { value: timeRange, onValueChange: (value) => setTimeRange(value), children: [_jsx(SelectTrigger, { className: "w-32", children: _jsx(SelectValue, {}) }), _jsxs(SelectContent, { children: [_jsx(SelectItem, { value: "7d", children: "Last 7 days" }), _jsx(SelectItem, { value: "30d", children: "Last 30 days" }), _jsx(SelectItem, { value: "90d", children: "Last 90 days" }), _jsx(SelectItem, { value: "1y", children: "Last year" })] })] }), _jsxs(Button, { size: "sm", variant: "outline", onClick: handleRefresh, disabled: isLoading, children: [_jsx(RefreshCw, { className: `w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}` }), "Refresh"] }), _jsx(Button, { size: "sm", variant: "ghost", onClick: onClose, children: _jsx(AlertTriangle, { className: "w-4 h-4" }) })] })] }) }), _jsxs(CardContent, { className: "space-y-6 overflow-y-auto max-h-[calc(95vh-120px)]", children: [_jsxs("div", { className: "grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4", children: [_jsx("div", { className: "p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("div", { className: "text-2xl font-bold text-blue-600 dark:text-blue-400", children: currentData.totalItems }), _jsx("div", { className: "text-sm text-blue-600 dark:text-blue-400", children: "Total Items" })] }), _jsx(ShoppingCart, { className: "w-8 h-8 text-blue-500" })] }) }), _jsx("div", { className: "p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("div", { className: "text-2xl font-bold text-orange-600 dark:text-orange-400", children: currentData.expiringSoon }), _jsx("div", { className: "text-sm text-orange-600 dark:text-orange-400", children: "Expiring Soon" })] }), _jsx(Clock, { className: "w-8 h-8 text-orange-500" })] }) }), _jsx("div", { className: "p-4 bg-red-50 dark:bg-red-900/20 rounded-lg", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("div", { className: "text-2xl font-bold text-red-600 dark:text-red-400", children: currentData.expired }), _jsx("div", { className: "text-sm text-red-600 dark:text-red-400", children: "Expired" })] }), _jsx(AlertTriangle, { className: "w-8 h-8 text-red-500" })] }) }), _jsx("div", { className: "p-4 bg-green-50 dark:bg-green-900/20 rounded-lg", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("div", { className: "text-2xl font-bold text-green-600 dark:text-green-400", children: currentData.consumed }), _jsx("div", { className: "text-sm text-green-600 dark:text-green-400", children: "Consumed" })] }), _jsx(CheckCircle, { className: "w-8 h-8 text-green-500" })] }) }), _jsx("div", { className: "p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsxs("div", { className: "text-2xl font-bold text-purple-600 dark:text-purple-400", children: ["$", currentData.totalValue.toFixed(2)] }), _jsx("div", { className: "text-sm text-purple-600 dark:text-purple-400", children: "Total Value" })] }), _jsx(DollarSign, { className: "w-8 h-8 text-purple-500" })] }) }), _jsx("div", { className: "p-4 bg-gray-50 dark:bg-gray-900/20 rounded-lg", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsxs("div", { className: "text-2xl font-bold text-gray-600 dark:text-gray-400", children: [efficiencyScore.toFixed(0), "%"] }), _jsx("div", { className: "text-sm text-gray-600 dark:text-gray-400", children: "Efficiency" })] }), _jsx(Target, { className: "w-8 h-8 text-gray-500" })] }) })] }), _jsxs(Tabs, { defaultValue: "overview", className: "w-full", children: [_jsxs(TabsList, { className: "grid w-full grid-cols-4", children: [_jsx(TabsTrigger, { value: "overview", children: "Overview" }), _jsx(TabsTrigger, { value: "trends", children: "Trends" }), _jsx(TabsTrigger, { value: "predictions", children: "Predictions" }), _jsx(TabsTrigger, { value: "recommendations", children: "Recommendations" })] }), _jsx(TabsContent, { value: "overview", className: "space-y-6", children: _jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-6", children: [_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-lg", children: "Category Breakdown" }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: filteredCategories.map((category) => (_jsxs("div", { className: "space-y-2", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "font-medium", children: category.category }), _jsxs("div", { className: "flex gap-2", children: [_jsxs(Badge, { variant: "outline", children: [category.count, " items"] }), _jsxs(Badge, { variant: category.wasteCount > 0 ? 'destructive' : 'default', children: [category.wasteCount, " wasted"] })] })] }), _jsx(Progress, { value: (category.count / currentData.totalItems) * 100, className: "h-2" }), _jsxs("div", { className: "text-sm text-slate-500", children: ["Value: $", category.value.toFixed(2), " \u2022 Waste Rate: ", ((category.wasteCount / category.count) * 100).toFixed(1), "%"] })] }, category.category))) }) })] }), _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-lg", children: "Waste Analysis" }) }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm", children: "Total Waste" }), _jsxs("span", { className: "font-bold text-red-600", children: [wastePercentage.toFixed(1), "%"] })] }), _jsx(Progress, { value: wastePercentage, className: "h-3" }), _jsxs("div", { className: "grid grid-cols-2 gap-4 pt-4", children: [_jsxs("div", { className: "text-center p-3 bg-red-50 dark:bg-red-900/20 rounded-lg", children: [_jsx(Trash2, { className: "w-8 h-8 mx-auto mb-2 text-red-500" }), _jsx("div", { className: "text-lg font-bold text-red-600", children: currentData.wasted }), _jsx("div", { className: "text-sm text-red-600", children: "Items Wasted" })] }), _jsxs("div", { className: "text-center p-3 bg-red-50 dark:bg-red-900/20 rounded-lg", children: [_jsx(DollarSign, { className: "w-8 h-8 mx-auto mb-2 text-red-500" }), _jsxs("div", { className: "text-lg font-bold text-red-600", children: ["$", currentData.wasteValue.toFixed(2)] }), _jsx("div", { className: "text-sm text-red-600", children: "Value Lost" })] })] })] }) })] })] }) }), _jsx(TabsContent, { value: "trends", className: "space-y-6", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-lg", children: "Monthly Trends" }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: currentData.monthlyTrends.map((month) => (_jsxs("div", { className: "p-4 border rounded-lg", children: [_jsxs("div", { className: "flex justify-between items-center mb-3", children: [_jsxs("span", { className: "font-semibold", children: [month.month, " 2024"] }), _jsxs("span", { className: "text-sm text-slate-500", children: ["Value: $", month.value.toFixed(2)] })] }), _jsxs("div", { className: "grid grid-cols-3 gap-4 text-sm", children: [_jsxs("div", { className: "text-center", children: [_jsx("div", { className: "font-bold text-green-600", children: month.added }), _jsx("div", { className: "text-slate-500", children: "Added" })] }), _jsxs("div", { className: "text-center", children: [_jsx("div", { className: "font-bold text-blue-600", children: month.consumed }), _jsx("div", { className: "text-slate-500", children: "Consumed" })] }), _jsxs("div", { className: "text-center", children: [_jsx("div", { className: "font-bold text-red-600", children: month.wasted }), _jsx("div", { className: "text-slate-500", children: "Wasted" })] })] })] }, month.month))) }) })] }) }), _jsx(TabsContent, { value: "predictions", className: "space-y-6", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-lg", children: "Expiry Predictions" }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-3", children: currentData.expiryPredictions.map((prediction, index) => (_jsxs("div", { className: "flex items-center justify-between p-3 bg-slate-50 dark:bg-slate-800 rounded-lg", children: [_jsxs("div", { className: "flex-1", children: [_jsx("div", { className: "font-medium", children: prediction.itemName }), _jsx("div", { className: "text-sm text-slate-500", children: prediction.category })] }), _jsxs("div", { className: "text-right", children: [_jsxs("div", { className: "font-bold text-orange-600", children: [prediction.predictedDays, " days"] }), _jsxs("div", { className: "text-sm text-slate-500", children: [Math.round(prediction.confidence * 100), "% confidence"] })] })] }, index))) }) })] }) }), _jsx(TabsContent, { value: "recommendations", className: "space-y-6", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-lg", children: "Smart Shopping Recommendations" }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-3", children: currentData.shoppingRecommendations.map((rec, index) => (_jsxs("div", { className: "p-4 border rounded-lg", children: [_jsxs("div", { className: "flex justify-between items-start mb-2", children: [_jsx("div", { className: "font-semibold text-lg", children: rec.item }), _jsxs(Badge, { variant: "outline", children: [rec.frequency, "x/week"] })] }), _jsx("p", { className: "text-slate-600 dark:text-slate-400 mb-3", children: rec.reason }), _jsxs("div", { className: "flex justify-between text-sm", children: [_jsxs("span", { children: ["Average consumption: ", rec.avgConsumption, " units"] }), _jsxs("span", { className: "font-medium text-green-600", children: ["Recommended: ", Math.ceil(rec.avgConsumption / rec.frequency), " units"] })] })] }, index))) }) })] }) })] }), _jsxs("div", { className: "flex justify-between items-center pt-4 border-t", children: [_jsxs("div", { className: "flex gap-2", children: [_jsxs(Button, { variant: "outline", size: "sm", onClick: () => handleExport('csv'), children: [_jsx(Download, { className: "w-4 h-4 mr-2" }), "Export CSV"] }), _jsxs(Button, { variant: "outline", size: "sm", onClick: () => handleExport('pdf'), children: [_jsx(Download, { className: "w-4 h-4 mr-2" }), "Export PDF"] }), _jsxs(Button, { variant: "outline", size: "sm", onClick: () => handleExport('json'), children: [_jsx(Download, { className: "w-4 h-4 mr-2" }), "Export JSON"] })] }), _jsxs("div", { className: "text-sm text-slate-500", children: ["Last updated: ", new Date().toLocaleString()] })] })] })] }) }));
};
export default AnalyticsDashboard;
