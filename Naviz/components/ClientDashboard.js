import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, Suspense, lazy } from 'react';
import { Button } from './ui/button';
import { Input } from './ui/input';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Badge } from './ui/badge';
import { useAuth } from '../contexts/AuthContext';
import { useApp } from '../contexts/AppContext';
import { useApi, apiCall } from '../hooks/useApi';
import { Search, Grid, List, Eye, User, LogOut, Filter, Calendar } from 'lucide-react';
// Lazy load heavy components
const ImageWithFallback = lazy(() => import('./figma/ImageWithFallback').then(module => ({ default: module.ImageWithFallback })));
export function ClientDashboard() {
    const { user, logout } = useAuth();
    const { setCurrentPage, setSelectedModel } = useApp();
    const [searchTerm, setSearchTerm] = useState('');
    const [viewMode, setViewMode] = useState('grid');
    const [sortBy, setSortBy] = useState('date');
    // Fetch models from backend
    const { data: modelsResponse, loading, error } = useApi('/models', [user]);
    const models = modelsResponse?.models || [];
    const filteredModels = models.filter(model => model.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        model.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
        model.tags.some((tag) => tag.toLowerCase().includes(searchTerm.toLowerCase())));
    const handleOpenWorkspace = async (model) => {
        try {
            // Record the view
            await apiCall(`/models/${model.id}/view`, { method: 'POST' });
            setSelectedModel(model);
            setCurrentPage('babylon-workspace');
        }
        catch (error) {
            console.error('Failed to record view:', error);
            // Still navigate even if view recording fails
            setSelectedModel(model);
            setCurrentPage('babylon-workspace');
        }
    };
    if (loading) {
        return (_jsx("div", { className: "min-h-screen bg-slate-900 flex items-center justify-center", children: _jsxs("div", { className: "text-center", children: [_jsx("div", { className: "animate-spin w-12 h-12 border-2 border-purple-500 border-t-transparent rounded-full mx-auto mb-4" }), _jsx("p", { className: "text-white text-lg", children: "Loading your models..." })] }) }));
    }
    if (error) {
        return (_jsx("div", { className: "min-h-screen bg-slate-900 flex items-center justify-center", children: _jsxs("div", { className: "text-center", children: [_jsx("p", { className: "text-red-400 text-lg mb-4", children: "Failed to load models" }), _jsx("p", { className: "text-gray-400", children: error })] }) }));
    }
    return (_jsxs("div", { className: "min-h-screen bg-slate-900", children: [_jsx("header", { className: "bg-slate-800/50 backdrop-blur-sm border-b border-slate-700 px-6 py-4", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("h1", { className: "text-2xl font-bold text-white", children: "My Models" }), _jsxs("p", { className: "text-gray-400", children: ["Welcome back, ", user?.username] })] }), _jsxs("div", { className: "flex items-center gap-4", children: [_jsxs(Button, { variant: "outline", className: "border-gray-600 text-gray-400 hover:text-white", children: [_jsx(User, { className: "w-4 h-4 mr-2" }), "Profile"] }), _jsxs(Button, { onClick: logout, variant: "outline", className: "border-red-400 text-red-400 hover:bg-red-400 hover:text-white", children: [_jsx(LogOut, { className: "w-4 h-4 mr-2" }), "Logout"] })] })] }) }), _jsxs("main", { className: "p-6", children: [_jsx("div", { className: "mb-8 space-y-4", children: _jsxs("div", { className: "flex flex-col sm:flex-row gap-4 items-center justify-between", children: [_jsx("div", { className: "flex-1 max-w-md", children: _jsxs("div", { className: "relative", children: [_jsx(Search, { className: "absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" }), _jsx(Input, { placeholder: "Search models...", value: searchTerm, onChange: (e) => setSearchTerm(e.target.value), className: "pl-10 bg-slate-800/50 border-slate-600 text-white placeholder-gray-400" })] }) }), _jsxs("div", { className: "flex items-center gap-2", children: [_jsxs(Button, { variant: "outline", size: "sm", className: "border-slate-600", children: [_jsx(Filter, { className: "w-4 h-4 mr-2" }), "Filter"] }), _jsxs("div", { className: "flex border border-slate-600 rounded-lg overflow-hidden", children: [_jsx(Button, { variant: viewMode === 'grid' ? 'default' : 'ghost', size: "sm", onClick: () => setViewMode('grid'), className: "rounded-none", children: _jsx(Grid, { className: "w-4 h-4" }) }), _jsx(Button, { variant: viewMode === 'list' ? 'default' : 'ghost', size: "sm", onClick: () => setViewMode('list'), className: "rounded-none", children: _jsx(List, { className: "w-4 h-4" }) })] })] })] }) }), viewMode === 'grid' ? (_jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6", children: filteredModels.map((model) => (_jsxs(Card, { className: "bg-slate-800/50 border-slate-700 hover:border-purple-500/50 transition-all duration-300 group cursor-pointer", children: [_jsxs("div", { className: "aspect-video relative overflow-hidden rounded-t-lg", children: [_jsx(Suspense, { fallback: _jsx("div", { className: "w-full h-full bg-slate-700 animate-pulse flex items-center justify-center", children: _jsx("div", { className: "text-gray-400", children: "Loading..." }) }), children: _jsx(ImageWithFallback, { src: model.thumbnail || `https://images.unsplash.com/photo-1586023492125-27b2c045efd7?w=300&h=200&fit=crop`, alt: model.name, className: "w-full h-full object-cover group-hover:scale-105 transition-transform duration-300" }) }), _jsx("div", { className: "absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300" }), _jsxs(Button, { onClick: () => handleOpenWorkspace(model), className: "absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400 opacity-0 group-hover:opacity-100 transition-all duration-300", size: "sm", children: [_jsx(Eye, { className: "w-4 h-4 mr-2" }), "Open in Workspace"] })] }), _jsxs(CardHeader, { className: "pb-2", children: [_jsx(CardTitle, { className: "text-white text-lg", children: model.name }), _jsx(CardDescription, { className: "text-gray-400 text-sm line-clamp-2", children: model.description })] }), _jsx(CardContent, { children: _jsxs("div", { className: "space-y-3", children: [_jsx("div", { className: "flex flex-wrap gap-1", children: model.tags.map((tag) => (_jsx(Badge, { variant: "outline", className: "text-xs border-slate-600 text-gray-400", children: tag }, tag))) }), _jsxs("div", { className: "flex items-center justify-between text-xs text-gray-500", children: [_jsxs("span", { className: "flex items-center gap-1", children: [_jsx(Calendar, { className: "w-3 h-3" }), new Date(model.uploadDate).toLocaleDateString()] }), _jsx("span", { children: model.size })] })] }) })] }, model.id))) })) : (_jsx("div", { className: "space-y-4", children: filteredModels.map((model) => (_jsx(Card, { className: "bg-slate-800/50 border-slate-700 hover:border-purple-500/50 transition-all duration-300", children: _jsx(CardContent, { className: "p-4", children: _jsxs("div", { className: "flex items-center gap-4", children: [_jsx("div", { className: "w-20 h-20 rounded-lg overflow-hidden flex-shrink-0", children: _jsx(Suspense, { fallback: _jsx("div", { className: "w-full h-full bg-slate-700 animate-pulse flex items-center justify-center", children: _jsx("div", { className: "text-gray-400 text-xs", children: "Loading..." }) }), children: _jsx(ImageWithFallback, { src: model.thumbnail, alt: model.name, className: "w-full h-full object-cover" }) }) }), _jsxs("div", { className: "flex-1 min-w-0", children: [_jsx("h3", { className: "text-white font-medium mb-1", children: model.name }), _jsx("p", { className: "text-gray-400 text-sm mb-2 line-clamp-1", children: model.description }), _jsx("div", { className: "flex flex-wrap gap-1 mb-2", children: model.tags.map((tag) => (_jsx(Badge, { variant: "outline", className: "text-xs border-slate-600 text-gray-400", children: tag }, tag))) }), _jsxs("div", { className: "flex items-center gap-4 text-xs text-gray-500", children: [_jsxs("span", { className: "flex items-center gap-1", children: [_jsx(Calendar, { className: "w-3 h-3" }), new Date(model.uploadDate).toLocaleDateString()] }), _jsxs("span", { children: [(model.fileSize / (1024 * 1024)).toFixed(1), " MB"] }), _jsx("span", { children: model.format })] })] }), _jsx("div", { className: "flex items-center gap-2", children: _jsxs(Button, { onClick: () => handleOpenWorkspace(model), className: "bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-400 hover:to-pink-400", size: "sm", children: [_jsx(Eye, { className: "w-4 h-4 mr-2" }), "Open"] }) })] }) }) }, model.id))) })), filteredModels.length === 0 && (_jsxs("div", { className: "text-center py-12", children: [_jsx("div", { className: "text-gray-400 text-lg mb-2", children: "No models found" }), _jsx("p", { className: "text-gray-500", children: "Try adjusting your search terms" })] }))] })] }));
}
