import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { Button } from './ui/button';
// Material Components
import { DragDropMaterialHandler } from './DragDropMaterialHandler';
// Feature Components
import MaterialEditor from './MaterialEditor';
import Minimap from './Minimap';
import MeasureTool from './MeasureTool';
import AutoFurnish from './AICoDesigner';
import AICoDesigner from './AICoDesigner';
import MoodScenePanel from './MoodScenePanel';
import SeasonalDecorPanel from './SeasonalDecorPanel';
import ARScalePanel from './ARScalePanel';
import ScenarioPanel from './ScenarioPanel';
import Annotations from './Annotations';
import BIMIntegration from './BIMIntegration';
// Advanced Features
import PathTracing from './PathTracing';
// Geo-Location Components
import GeoLocationContext from './GeoLocationContext';
import GeoWorkspaceArea from './GeoWorkspaceArea';
import GeoSyncManager from './GeoSyncManager';
// Specialized Components
import CameraViews from './CameraViews';
import CirculationFlowSimulation from './CirculationFlowSimulation';
import ComprehensiveSimulation from './ComprehensiveSimulation';
import ConstructionOverlay from './ConstructionOverlay';
import FloodSimulation from './FloodSimulation';
import ShadowImpactAnalysis from './ShadowImpactAnalysis';
import TrafficParkingSimulation from './TrafficParkingSimulation';
const CustomPanelsContainer = ({ sceneRef, canvasRef, cameraRef, engineRef, onMaterialApplied, workspaces, selectedWorkspaceId, onWorkspaceSelect, simulationManagerRef, currentModelId, bimManagerRef, 
// Feature states
showMaterialEditor, showMinimap, showMeasurementTool, showAutoFurnish, showAICoDesigner, showMoodScene, showSeasonalDecor, showARScale, showScenario, showAnimationTimeline, showBIMIntegration, showCameraViews, showCirculationFlowSimulation, showCollabManager, showComprehensiveSimulation, showConstructionOverlay, showAnnotations, showFloodSimulation, showTrafficParkingSimulation, showShadowImpactAnalysis, showMovementControlChecker, showTeleportManager, showSwimMode, showMultiSensoryPreview, showNoiseSimulation, showPropertyInspector, showSceneBrowser, showSiteContextGenerator, showSmartAlternatives, showSoundPrivacySimulation, showSunlightAnalysis, showSustainabilityCompliancePanel, showPathTracing, showPHashIntegration, showProgressiveLoader, showPresentationManager, showPresenterMode, showQuantumSimulationInterface, showWeather, showWind, showNoise, showAIAdvisor, showVoiceAssistant, showErgonomic, showEnergy, showCost, showBeforeAfter, showComparativeTour, showROICalculator, showMultiUser, showChat, showSharing, showVR, showAR, showSpatialAudio, showHaptic, showXRManager, showGeoLocation, showGeoWorkspaceArea, showGeoSync, showWetMaterialManager, showWindTunnelSimulation, showUnderwaterMode, showWaterShader, showVoiceChat, showVRARMode, 
// State setters
setShowMaterialEditor, setShowMinimap, setShowMeasurementTool, setShowAutoFurnish, setShowAICoDesigner, setShowMoodScene, setShowSeasonalDecor, setShowARScale, setShowScenario, setShowAnimationTimeline, setShowBIMIntegration, setShowCameraViews, setShowCirculationFlowSimulation, setShowCollabManager, setShowComprehensiveSimulation, setShowConstructionOverlay, setShowAnnotations, setShowFloodSimulation, setShowTrafficParkingSimulation, setShowShadowImpactAnalysis, setShowMovementControlChecker, setShowTeleportManager, setShowSwimMode, setShowMultiSensoryPreview, setShowNoiseSimulation, setShowPropertyInspector, setShowSceneBrowser, setShowSiteContextGenerator, setShowSmartAlternatives, setShowSoundPrivacySimulation, setShowSunlightAnalysis, setShowSustainabilityCompliancePanel, setShowPathTracing, setShowPHashIntegration, setShowProgressiveLoader, setShowPresentationManager, setShowPresenterMode, setShowQuantumSimulationInterface, setShowWeather, setShowWind, setShowNoise, setShowAIAdvisor, setShowVoiceAssistant, setShowErgonomic, setShowEnergy, setShowCost, setShowBeforeAfter, setShowComparativeTour, setShowROICalculator, setShowMultiUser, setShowChat, setShowSharing, setShowVR, setShowAR, setShowSpatialAudio, setShowHaptic, setShowXRManager, setShowGeoLocation, setShowGeoWorkspaceArea, setShowGeoSync, setShowWetMaterialManager, setShowWindTunnelSimulation, setShowUnderwaterMode, setShowWaterShader, setShowVoiceChat, setShowVRARMode }) => {
    const sceneManager = sceneRef.current ? { scene: sceneRef.current } : null;
    return (_jsxs(_Fragment, { children: [showMaterialEditor && sceneManager && _jsx(MaterialEditor, { sceneManager: sceneManager, onClose: () => setShowMaterialEditor(false), onMaterialChange: () => { } }), showMinimap && sceneRef.current && cameraRef.current && _jsx(Minimap, { scene: sceneRef.current, camera: cameraRef.current, onCameraMove: () => { }, workspaces: workspaces, selectedWorkspaceId: selectedWorkspaceId, onWorkspaceSelect: onWorkspaceSelect }), showMeasurementTool && sceneRef.current && engineRef.current && (_jsx(MeasureTool, { scene: sceneRef.current, engine: engineRef.current, isActive: showMeasurementTool, onMeasurementComplete: (measurement) => console.log('Measurement completed:', measurement) })), showAutoFurnish && sceneManager && _jsx(AutoFurnish, { sceneManager: sceneManager, onClose: () => setShowAutoFurnish(false) }), showAICoDesigner && sceneManager && _jsx(AICoDesigner, { sceneManager: sceneManager, onClose: () => setShowAICoDesigner(false) }), showMoodScene && sceneManager && _jsx(MoodScenePanel, { sceneManager: sceneManager, onClose: () => setShowMoodScene(false) }), showSeasonalDecor && sceneManager && _jsx(SeasonalDecorPanel, { sceneManager: sceneManager, onClose: () => setShowSeasonalDecor(false) }), showARScale && sceneManager && _jsx(ARScalePanel, { sceneManager: sceneManager, onClose: () => setShowARScale(false) }), showScenario && sceneManager && _jsx(ScenarioPanel, { sceneManager: sceneManager, onClose: () => setShowScenario(false) }), showAnnotations && sceneManager && _jsx(Annotations, { scene: sceneManager.scene, isActive: showAnnotations }), showBIMIntegration && sceneManager && _jsx(BIMIntegration, { scene: sceneManager.scene, isActive: showBIMIntegration, bimManager: bimManagerRef ?? undefined, onClose: () => setShowBIMIntegration(false) }), sceneRef.current && canvasRef.current && (_jsx(DragDropMaterialHandler, { scene: sceneRef.current, canvas: canvasRef.current, onMaterialApplied: onMaterialApplied })), showMovementControlChecker && sceneRef.current && (_jsxs("div", { className: "fixed top-4 left-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Movement Control Checker" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Movement control checker active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowMovementControlChecker(false), className: "mt-2", children: "Close" })] })), showTeleportManager && sceneRef.current && cameraRef.current && (_jsxs("div", { className: "fixed top-4 left-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Teleport Manager" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Teleport navigation active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowTeleportManager(false), className: "mt-2", children: "Close" })] })), showSwimMode && sceneRef.current && cameraRef.current && (_jsxs("div", { className: "fixed top-4 right-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Swim Mode" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Swim mode active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowSwimMode(false), className: "mt-2", children: "Close" })] })), showMultiSensoryPreview && sceneRef.current && (_jsxs("div", { className: "fixed top-4 left-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Multi-Sensory Preview" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Multi-sensory preview active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowMultiSensoryPreview(false), className: "mt-2", children: "Close" })] })), showNoiseSimulation && sceneRef.current && engineRef.current && (_jsxs("div", { className: "fixed top-4 right-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Noise Simulation" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Noise simulation active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowNoiseSimulation(false), className: "mt-2", children: "Close" })] })), showPropertyInspector && sceneRef.current && (_jsxs("div", { className: "fixed top-4 left-1/2 transform -translate-x-1/2 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Property Inspector" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Property inspection active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowPropertyInspector(false), className: "mt-2", children: "Close" })] })), showSceneBrowser && sceneRef.current && (_jsxs("div", { className: "fixed top-4 right-1/4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Scene Browser" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Scene browsing active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowSceneBrowser(false), className: "mt-2", children: "Close" })] })), showSiteContextGenerator && sceneRef.current && (_jsxs("div", { className: "fixed top-4 left-1/4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Site Context Generator" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Site context generation active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowSiteContextGenerator(false), className: "mt-2", children: "Close" })] })), showSmartAlternatives && sceneRef.current && (_jsxs("div", { className: "fixed bottom-4 right-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Smart Alternatives" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Smart alternatives active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowSmartAlternatives(false), className: "mt-2", children: "Close" })] })), showSoundPrivacySimulation && sceneRef.current && engineRef.current && (_jsxs("div", { className: "fixed bottom-4 left-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Sound Privacy Simulation" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Sound privacy simulation active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowSoundPrivacySimulation(false), className: "mt-2", children: "Close" })] })), showSunlightAnalysis && sceneRef.current && engineRef.current && (_jsxs("div", { className: "fixed top-1/2 left-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Sunlight Analysis" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Sunlight analysis active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowSunlightAnalysis(false), className: "mt-2", children: "Close" })] })), showSustainabilityCompliancePanel && sceneRef.current && (_jsxs("div", { className: "fixed top-1/2 right-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Sustainability Compliance" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Sustainability compliance active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowSustainabilityCompliancePanel(false), className: "mt-2", children: "Close" })] })), showWindTunnelSimulation && sceneRef.current && engineRef.current && (_jsxs("div", { className: "fixed top-4 right-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Wind Tunnel Simulation" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Wind simulation active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowWindTunnelSimulation(false), className: "mt-2", children: "Close" })] })), showPathTracing && sceneRef.current && (_jsx(PathTracing, { scene: sceneRef.current })), showPHashIntegration && (_jsxs("div", { className: "fixed top-4 right-4 z-50 bg-gray-800 p-4 rounded-lg border border-gray-600 text-white", children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "PHash Integration" }), _jsx("p", { className: "text-sm", children: "Perceptual hashing for scene analysis" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowPHashIntegration(false), className: "mt-2", children: "Close" })] })), showProgressiveLoader && (_jsxs("div", { className: "fixed top-4 right-4 z-50 bg-gray-800 p-4 rounded-lg border border-gray-600 text-white", children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "Progressive Loader" }), _jsx("p", { className: "text-sm", children: "Progressive asset loading system" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowProgressiveLoader(false), className: "mt-2", children: "Close" })] })), showPresentationManager && (_jsxs("div", { className: "fixed top-4 right-4 z-50 bg-gray-800 p-4 rounded-lg border border-gray-600 text-white", children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "Presentation Manager" }), _jsx("p", { className: "text-sm", children: "Presentation and slideshow features" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowPresentationManager(false), className: "mt-2", children: "Close" })] })), showPresenterMode && (_jsxs("div", { className: "fixed top-4 right-4 z-50 bg-gray-800 p-4 rounded-lg border border-gray-600 text-white", children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "Presenter Mode" }), _jsx("p", { className: "text-sm", children: "Presentation mode for demonstrations" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowPresenterMode(false), className: "mt-2", children: "Close" })] })), showQuantumSimulationInterface && (_jsxs("div", { className: "fixed top-4 right-4 z-50 bg-gray-800 p-4 rounded-lg border border-gray-600 text-white", children: [_jsx("h3", { className: "text-lg font-semibold mb-2", children: "Quantum Simulation" }), _jsx("p", { className: "text-sm", children: "Quantum computing simulation interface" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowQuantumSimulationInterface(false), className: "mt-2", children: "Close" })] })), showWeather && sceneRef.current && (_jsxs("div", { className: "fixed top-4 left-1/2 transform -translate-x-1/2 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Weather Simulation" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Weather effects active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowWeather(false), className: "mt-2", children: "Close" })] })), showWind && sceneRef.current && (_jsxs("div", { className: "fixed top-4 right-1/4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Wind Simulation" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Wind effects active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowWind(false), className: "mt-2", children: "Close" })] })), showNoise && sceneRef.current && (_jsxs("div", { className: "fixed top-4 left-1/4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Noise Simulation" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Noise analysis active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowNoise(false), className: "mt-2", children: "Close" })] })), showAIAdvisor && sceneRef.current && (_jsxs("div", { className: "fixed bottom-4 right-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "AI Advisor" }), _jsx("p", { className: "text-slate-300 text-sm", children: "AI assistance active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowAIAdvisor(false), className: "mt-2", children: "Close" })] })), showVoiceAssistant && sceneRef.current && (_jsxs("div", { className: "fixed bottom-4 left-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Voice Assistant" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Voice commands active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowVoiceAssistant(false), className: "mt-2", children: "Close" })] })), showErgonomic && sceneRef.current && (_jsxs("div", { className: "fixed top-1/2 left-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Ergonomic Analysis" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Ergonomic evaluation active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowErgonomic(false), className: "mt-2", children: "Close" })] })), showEnergy && sceneRef.current && (_jsxs("div", { className: "fixed top-1/2 right-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Energy Analysis" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Energy efficiency analysis active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowEnergy(false), className: "mt-2", children: "Close" })] })), showCost && sceneRef.current && (_jsxs("div", { className: "fixed bottom-1/2 left-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Cost Estimation" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Cost analysis active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowCost(false), className: "mt-2", children: "Close" })] })), showBeforeAfter && sceneRef.current && (_jsxs("div", { className: "fixed bottom-1/2 right-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Before/After Comparison" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Comparison mode active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowBeforeAfter(false), className: "mt-2", children: "Close" })] })), showComparativeTour && sceneRef.current && (_jsxs("div", { className: "fixed top-1/4 right-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Comparative Tour" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Side-by-side tour active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowComparativeTour(false), className: "mt-2", children: "Close" })] })), showROICalculator && sceneRef.current && (_jsxs("div", { className: "fixed top-1/4 left-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "ROI Calculator" }), _jsx("p", { className: "text-slate-300 text-sm", children: "ROI analysis active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowROICalculator(false), className: "mt-2", children: "Close" })] })), showMultiUser && sceneRef.current && (_jsxs("div", { className: "fixed top-4 right-1/3 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Multi-User Collaboration" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Multi-user session active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowMultiUser(false), className: "mt-2", children: "Close" })] })), showChat && sceneRef.current && (_jsxs("div", { className: "fixed bottom-4 right-1/3 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Chat" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Real-time chat active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowChat(false), className: "mt-2", children: "Close" })] })), showSharing && sceneRef.current && (_jsxs("div", { className: "fixed bottom-4 left-1/3 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Sharing" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Share workspace active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowSharing(false), className: "mt-2", children: "Close" })] })), showVR && sceneRef.current && (_jsxs("div", { className: "fixed top-1/3 left-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "VR Mode" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Virtual reality active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowVR(false), className: "mt-2", children: "Close" })] })), showAR && sceneRef.current && (_jsxs("div", { className: "fixed top-1/3 right-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "AR Mode" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Augmented reality active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowAR(false), className: "mt-2", children: "Close" })] })), showSpatialAudio && sceneRef.current && (_jsxs("div", { className: "fixed bottom-1/3 left-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Spatial Audio" }), _jsx("p", { className: "text-slate-300 text-sm", children: "3D audio active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowSpatialAudio(false), className: "mt-2", children: "Close" })] })), showHaptic && sceneRef.current && (_jsxs("div", { className: "fixed bottom-1/3 right-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Haptic Feedback" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Haptic feedback active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowHaptic(false), className: "mt-2", children: "Close" })] })), showGeoLocation && sceneRef.current && (_jsx(GeoLocationContext, { scene: sceneRef.current, onLocationChange: (location) => console.log('Location changed:', location), onSunPathUpdate: (sunPath) => console.log('Sun path updated:', sunPath) })), showGeoWorkspaceArea && sceneRef.current && (_jsx(GeoWorkspaceArea, { scene: sceneRef.current, geoSyncManager: new GeoSyncManager(sceneRef.current), onWorkspaceCreated: (workspace) => console.log('Workspace created:', workspace), onWorkspaceSelected: (workspace) => console.log('Workspace selected:', workspace) })), showGeoSync && sceneRef.current && (_jsxs("div", { className: "fixed top-4 right-1/3 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Geo Sync" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Geo-synchronization active" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowGeoSync(false), className: "mt-2", children: "Close" })] })), showCameraViews && sceneRef.current && cameraRef.current && (_jsx(CameraViews, { camera: cameraRef.current, scene: sceneRef.current, onViewChange: (view) => console.log('Camera view changed:', view) })), showCirculationFlowSimulation && sceneRef.current && engineRef.current && (_jsx(CirculationFlowSimulation, { scene: sceneRef.current, engine: engineRef.current, isActive: showCirculationFlowSimulation, onSimulationComplete: (results) => console.log('Simulation completed:', results) })), showCollabManager && sceneRef.current && engineRef.current && (_jsxs("div", { className: "fixed top-4 right-4 z-50 bg-slate-800 p-4 rounded-lg border border-slate-600", children: [_jsx("h3", { className: "text-white mb-2", children: "Collaboration Manager" }), _jsx("p", { className: "text-slate-300 text-sm", children: "Collaboration features initialized" }), _jsx(Button, { size: "sm", variant: "outline", onClick: () => setShowCollabManager(false), className: "mt-2", children: "Close" })] })), showComprehensiveSimulation && _jsx(ComprehensiveSimulation, {}), showConstructionOverlay && sceneRef.current && (_jsx(ConstructionOverlay, { scene: sceneRef.current, onOverlayApplied: (overlay) => console.log('Overlay applied:', overlay) })), showFloodSimulation && sceneRef.current && (_jsx(FloodSimulation, { scene: sceneRef.current, terrainMesh: null, onFloodLevelChange: (level) => console.log('Flood level changed:', level) })), showShadowImpactAnalysis && sceneRef.current && engineRef.current && (_jsx(ShadowImpactAnalysis, { scene: sceneRef.current, engine: engineRef.current, onShadowAnalysisComplete: (results) => console.log('Shadow analysis results:', results) })), showTrafficParkingSimulation && sceneRef.current && engineRef.current && (_jsx(TrafficParkingSimulation, { simulationManager: simulationManagerRef.current, onSimulationComplete: (results) => console.log('Traffic simulation completed:', results) }))] }));
};
export default CustomPanelsContainer;
