import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useWorkspace } from '../core/WorkspaceContext';
import { Button } from '../../ui/button';
import { Badge } from '../../ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '../../ui/tabs';
import { ScrollArea } from '../../ui/scroll-area';
import { Input } from '../../ui/input';
import { Separator } from '../../ui/separator';
import { Card, CardContent, CardHeader, CardTitle } from '../../ui/card';
import { Progress } from '../../ui/progress';
import { Eye, Palette, RotateCcw, Grid3X3, Activity, Monitor, HardDrive, Cpu, Thermometer, CheckCircle, XCircle, Maximize, Copy, Trash, Edit, Save, Download, Upload } from 'lucide-react';
import './RightPanel.css';
export function RightPanel({ onClose, onMeshSelect, onMaterialEdit, onSceneExport, onSceneImport }) {
    const { state } = useWorkspace();
    // Get selected mesh info
    const selectedMesh = state.selectedMesh;
    const meshInfo = selectedMesh ? {
        name: selectedMesh.name,
        id: selectedMesh.id,
        position: selectedMesh.position,
        rotation: selectedMesh.rotation,
        scaling: selectedMesh.scaling,
        material: selectedMesh.material?.name || 'None',
        visible: selectedMesh.isVisible,
        enabled: selectedMesh.isEnabled(),
    } : null;
    // Get scene statistics
    const sceneStats = {
        meshes: state.scene?.meshes?.length || 0,
        materials: state.materials?.length || 0,
        lights: state.scene?.lights?.length || 0,
        cameras: state.scene?.cameras?.length || 0,
        textures: state.scene?.textures?.length || 0,
        particles: state.scene?.particleSystems?.length || 0,
    };
    // Get performance metrics
    const performanceMetrics = {
        fps: 60, // Placeholder - would get from Babylon.js engine
        frameTime: 16.67, // Placeholder
        drawCalls: 150, // Placeholder
        triangles: 50000, // Placeholder
        memoryUsage: '256 MB', // Placeholder
        gpuMemory: '128 MB', // Placeholder
    };
    return (_jsxs("div", { className: "right-panel", children: [_jsxs("div", { className: "right-panel-header", children: [_jsx("h2", { className: "right-panel-title", children: "Inspector" }), _jsx(Button, { variant: "ghost", size: "sm", className: "right-panel-close", onClick: onClose, children: _jsx(Maximize, { className: "w-4 h-4" }) })] }), _jsxs(Tabs, { defaultValue: "inspector", className: "right-panel-tabs", children: [_jsxs(TabsList, { className: "right-panel-tabs-list", children: [_jsxs(TabsTrigger, { value: "inspector", className: "right-panel-tab", children: [_jsx(Eye, { className: "w-4 h-4" }), "Inspector"] }), _jsxs(TabsTrigger, { value: "scene", className: "right-panel-tab", children: [_jsx(Grid3X3, { className: "w-4 h-4" }), "Scene"] }), _jsxs(TabsTrigger, { value: "performance", className: "right-panel-tab", children: [_jsx(Activity, { className: "w-4 h-4" }), "Performance"] }), _jsxs(TabsTrigger, { value: "materials", className: "right-panel-tab", children: [_jsx(Palette, { className: "w-4 h-4" }), "Materials"] })] }), _jsxs(ScrollArea, { className: "right-panel-scroll-area", children: [_jsx(TabsContent, { value: "inspector", className: "right-panel-tab-content", children: meshInfo ? (_jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-sm", children: "Selected Object" }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "object-info", children: [_jsxs("div", { className: "info-row", children: [_jsx("span", { className: "info-label", children: "Name:" }), _jsx("span", { className: "info-value", children: meshInfo.name })] }), _jsxs("div", { className: "info-row", children: [_jsx("span", { className: "info-label", children: "ID:" }), _jsx("span", { className: "info-value", children: meshInfo.id })] }), _jsxs("div", { className: "info-row", children: [_jsx("span", { className: "info-label", children: "Material:" }), _jsx("span", { className: "info-value", children: meshInfo.material })] }), _jsxs("div", { className: "info-row", children: [_jsx("span", { className: "info-label", children: "Visible:" }), _jsx("span", { className: "info-value", children: meshInfo.visible ? (_jsx(CheckCircle, { className: "w-4 h-4 text-green-500" })) : (_jsx(XCircle, { className: "w-4 h-4 text-red-500" })) })] })] }), _jsx(Separator, {}), _jsxs("div", { className: "transform-controls", children: [_jsx("h4", { className: "section-title", children: "Transform" }), _jsxs("div", { className: "control-group", children: [_jsx("label", { className: "control-label", children: "Position" }), _jsxs("div", { className: "vector-inputs", children: [_jsx(Input, { type: "number", placeholder: "X", value: meshInfo.position?.x?.toFixed(2) || '0.00', className: "vector-input", readOnly: true }), _jsx(Input, { type: "number", placeholder: "Y", value: meshInfo.position?.y?.toFixed(2) || '0.00', className: "vector-input", readOnly: true }), _jsx(Input, { type: "number", placeholder: "Z", value: meshInfo.position?.z?.toFixed(2) || '0.00', className: "vector-input", readOnly: true })] })] }), _jsxs("div", { className: "control-group", children: [_jsx("label", { className: "control-label", children: "Rotation" }), _jsxs("div", { className: "vector-inputs", children: [_jsx(Input, { type: "number", placeholder: "X", value: meshInfo.rotation?.x?.toFixed(2) || '0.00', className: "vector-input", readOnly: true }), _jsx(Input, { type: "number", placeholder: "Y", value: meshInfo.rotation?.y?.toFixed(2) || '0.00', className: "vector-input", readOnly: true }), _jsx(Input, { type: "number", placeholder: "Z", value: meshInfo.rotation?.z?.toFixed(2) || '0.00', className: "vector-input", readOnly: true })] })] }), _jsxs("div", { className: "control-group", children: [_jsx("label", { className: "control-label", children: "Scale" }), _jsxs("div", { className: "vector-inputs", children: [_jsx(Input, { type: "number", placeholder: "X", value: meshInfo.scaling?.x?.toFixed(2) || '1.00', className: "vector-input", readOnly: true }), _jsx(Input, { type: "number", placeholder: "Y", value: meshInfo.scaling?.y?.toFixed(2) || '1.00', className: "vector-input", readOnly: true }), _jsx(Input, { type: "number", placeholder: "Z", value: meshInfo.scaling?.z?.toFixed(2) || '1.00', className: "vector-input", readOnly: true })] })] })] }), _jsx(Separator, {}), _jsxs("div", { className: "quick-actions", children: [_jsxs(Button, { variant: "outline", size: "sm", className: "action-button", children: [_jsx(Copy, { className: "w-4 h-4 mr-2" }), "Duplicate"] }), _jsxs(Button, { variant: "outline", size: "sm", className: "action-button", children: [_jsx(Edit, { className: "w-4 h-4 mr-2" }), "Edit Material"] }), _jsxs(Button, { variant: "outline", size: "sm", className: "action-button", children: [_jsx(Trash, { className: "w-4 h-4 mr-2" }), "Delete"] })] })] })] })) : (_jsx(Card, { children: _jsxs(CardContent, { className: "p-6 text-center text-gray-500", children: [_jsx(Eye, { className: "w-12 h-12 mx-auto mb-4 opacity-50" }), _jsx("p", { children: "No object selected" }), _jsx("p", { className: "text-sm", children: "Click on an object in the scene to inspect it" })] }) })) }), _jsx(TabsContent, { value: "scene", className: "right-panel-tab-content", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-sm", children: "Scene Statistics" }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "scene-stats", children: [_jsxs("div", { className: "stat-row", children: [_jsx("span", { className: "stat-label", children: "Meshes:" }), _jsx(Badge, { variant: "secondary", children: sceneStats.meshes })] }), _jsxs("div", { className: "stat-row", children: [_jsx("span", { className: "stat-label", children: "Materials:" }), _jsx(Badge, { variant: "secondary", children: sceneStats.materials })] }), _jsxs("div", { className: "stat-row", children: [_jsx("span", { className: "stat-label", children: "Lights:" }), _jsx(Badge, { variant: "secondary", children: sceneStats.lights })] }), _jsxs("div", { className: "stat-row", children: [_jsx("span", { className: "stat-label", children: "Cameras:" }), _jsx(Badge, { variant: "secondary", children: sceneStats.cameras })] }), _jsxs("div", { className: "stat-row", children: [_jsx("span", { className: "stat-label", children: "Textures:" }), _jsx(Badge, { variant: "secondary", children: sceneStats.textures })] }), _jsxs("div", { className: "stat-row", children: [_jsx("span", { className: "stat-label", children: "Particles:" }), _jsx(Badge, { variant: "secondary", children: sceneStats.particles })] })] }), _jsx(Separator, {}), _jsxs("div", { className: "scene-actions", children: [_jsxs(Button, { variant: "outline", size: "sm", className: "scene-action-button", onClick: onSceneImport, children: [_jsx(Upload, { className: "w-4 h-4 mr-2" }), "Import Scene"] }), _jsxs(Button, { variant: "outline", size: "sm", className: "scene-action-button", onClick: onSceneExport, children: [_jsx(Download, { className: "w-4 h-4 mr-2" }), "Export Scene"] })] })] })] }) }), _jsx(TabsContent, { value: "performance", className: "right-panel-tab-content", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-sm", children: "Performance Metrics" }) }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "metric-group", children: [_jsxs("div", { className: "metric-row", children: [_jsx("span", { className: "metric-label", children: "FPS:" }), _jsx("span", { className: "metric-value", children: performanceMetrics.fps })] }), _jsx(Progress, { value: (performanceMetrics.fps / 60) * 100, className: "metric-progress" })] }), _jsxs("div", { className: "metric-group", children: [_jsxs("div", { className: "metric-row", children: [_jsx("span", { className: "metric-label", children: "Frame Time:" }), _jsxs("span", { className: "metric-value", children: [performanceMetrics.frameTime.toFixed(1), "ms"] })] }), _jsx(Progress, { value: Math.min((performanceMetrics.frameTime / 33.33) * 100, 100), className: "metric-progress" })] }), _jsxs("div", { className: "metric-group", children: [_jsxs("div", { className: "metric-row", children: [_jsx("span", { className: "metric-label", children: "Draw Calls:" }), _jsx("span", { className: "metric-value", children: performanceMetrics.drawCalls })] }), _jsx(Progress, { value: Math.min((performanceMetrics.drawCalls / 1000) * 100, 100), className: "metric-progress" })] }), _jsxs("div", { className: "metric-group", children: [_jsxs("div", { className: "metric-row", children: [_jsx("span", { className: "metric-label", children: "Triangles:" }), _jsx("span", { className: "metric-value", children: performanceMetrics.triangles.toLocaleString() })] }), _jsx(Progress, { value: Math.min((performanceMetrics.triangles / 100000) * 100, 100), className: "metric-progress" })] }), _jsx(Separator, {}), _jsxs("div", { className: "system-info", children: [_jsxs("div", { className: "info-row", children: [_jsx(HardDrive, { className: "w-4 h-4" }), _jsxs("span", { children: ["Memory: ", performanceMetrics.memoryUsage] })] }), _jsxs("div", { className: "info-row", children: [_jsx(Monitor, { className: "w-4 h-4" }), _jsxs("span", { children: ["GPU Memory: ", performanceMetrics.gpuMemory] })] }), _jsxs("div", { className: "info-row", children: [_jsx(Cpu, { className: "w-4 h-4" }), _jsx("span", { children: "CPU Usage: 45%" })] }), _jsxs("div", { className: "info-row", children: [_jsx(Thermometer, { className: "w-4 h-4" }), _jsx("span", { children: "GPU Temp: 65\u00B0C" })] })] })] })] }) }), _jsx(TabsContent, { value: "materials", className: "right-panel-tab-content", children: _jsxs(Card, { children: [_jsx(CardHeader, { children: _jsx(CardTitle, { className: "text-sm", children: "Materials" }) }), _jsx(CardContent, { children: state.materials && state.materials.length > 0 ? (_jsx("div", { className: "materials-list", children: state.materials.map((material, index) => (_jsxs("div", { className: "material-item", children: [_jsxs("div", { className: "material-info", children: [_jsx("div", { className: "material-name", children: material.name || `Material ${index + 1}` }), _jsx("div", { className: "material-type", children: material.constructor?.name || 'Unknown' })] }), _jsx(Button, { variant: "outline", size: "sm", className: "material-edit-button", onClick: () => onMaterialEdit && onMaterialEdit(material.id || index.toString()), children: _jsx(Edit, { className: "w-4 h-4" }) })] }, index))) })) : (_jsxs("div", { className: "text-center text-gray-500 py-8", children: [_jsx(Palette, { className: "w-12 h-12 mx-auto mb-4 opacity-50" }), _jsx("p", { children: "No materials found" }), _jsx("p", { className: "text-sm", children: "Materials will appear here when loaded" })] })) })] }) })] })] })] }));
}
export function MaterialInspector({ material, onPropertyChange, onSave, onReset }) {
    if (!material) {
        return (_jsx(Card, { children: _jsxs(CardContent, { className: "p-6 text-center text-gray-500", children: [_jsx(Palette, { className: "w-12 h-12 mx-auto mb-4 opacity-50" }), _jsx("p", { children: "No material selected" })] }) }));
    }
    return (_jsxs(Card, { children: [_jsxs(CardHeader, { children: [_jsx(CardTitle, { className: "text-sm", children: "Material Inspector" }), _jsxs("div", { className: "material-header-actions", children: [_jsxs(Button, { variant: "outline", size: "sm", onClick: onReset, children: [_jsx(RotateCcw, { className: "w-4 h-4 mr-2" }), "Reset"] }), _jsxs(Button, { variant: "outline", size: "sm", onClick: onSave, children: [_jsx(Save, { className: "w-4 h-4 mr-2" }), "Save"] })] })] }), _jsxs(CardContent, { className: "space-y-4", children: [_jsxs("div", { className: "material-info", children: [_jsxs("div", { className: "info-row", children: [_jsx("span", { className: "info-label", children: "Name:" }), _jsx(Input, { value: material.name || 'Unnamed', onChange: (e) => onPropertyChange && onPropertyChange('name', e.target.value), className: "info-input" })] }), _jsxs("div", { className: "info-row", children: [_jsx("span", { className: "info-label", children: "Type:" }), _jsx("span", { className: "info-value", children: material.constructor?.name || 'Unknown' })] })] }), _jsx(Separator, {}), _jsx("div", { className: "material-properties", children: _jsx("p", { className: "text-sm text-gray-500", children: "Material properties editor would be implemented here based on material type." }) })] })] }));
}
